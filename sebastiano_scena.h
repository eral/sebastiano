#pragma once


//------ Include ---------------------- インクルード ---------------------------
#include "Arduino.h"
namespace sebastiano {
	class teatro;
}


//------ Debug ------------------------ デバッグ -------------------------------
#if defined(_DEBUG)
#endif //#if defined(_DEBUG)
//------ Macro ------------------------ マクロ ---------------------------------


namespace sebastiano {
//------ Class ------------------------ クラス ---------------------------------
/*!	@class
	@brief	シーンインターフェース
		テアトロに登録する為のシーンのインターフェースを提供します。
*/
class scena {
	//-- Constant --------------------- 定数 -----------------------------------
protected:
private:
public:
	//-- Public Variable -------------- 公開変数 -------------------------------
	//-- Public Function -------------- 公開関数 -------------------------------
	//==============================================================================
	/*! scena::pre_update
		前更新
	
		@param	teatro	[io]	管理テアトロ
	/*///===========================================================================
	virtual void pre_update(teatro &teatro) {static_cast<void>(teatro);}

	//==============================================================================
	/*! scena::update
		更新
	
		@param	teatro	[io]	管理テアトロ
	/*///===========================================================================
	virtual void update(teatro &teatro) {static_cast<void>(teatro);}

	//==============================================================================
	/*! scena::post_update
		後更新
	
		@param	teatro	[io]	管理テアトロ
	/*///===========================================================================
	virtual void post_update(teatro &teatro) {static_cast<void>(teatro);}

	//==============================================================================
	/*! scena::draw
		描画
	/*///===========================================================================
	virtual void draw() const {}

	//==============================================================================
	/*! scena::next_update_pointer
		次の更新時のポインタ
	
		@return 次の更新時のポインタ
	
		@note
			次の更新時の処理されてほしいscenaのポインタを返します。
			次回も継続して自身が処理されてほしいなら this を返します。
			次回呼ばれる必要は無く、破棄されてほしいなら NULL を返します。
			別の scena に切り替えたいならそのポインタを返します。
	/*///===========================================================================
	virtual scena *next_update_pointer() const {return const_cast<scena *>(this);}


	//-- Geter Function --------------- 取得関数 -------------------------------
	//-- Seter Function --------------- 設定関数 -------------------------------
	//-- Constructor And Destructor --- コンストラクタ・デストラクタ -----------
	//==============================================================================
	/*! scena::scena
		デフォルトコンストラクタ
	/*///===========================================================================
public:
	scena() {}

	//==============================================================================
	/*! scena::scena
		コピーコンストラクタ
	
		@note
			コピー禁止
	/*///===========================================================================
private:
	scena(const scena &src);
	scena &operator=(const scena &src);

	//==============================================================================
	/*! scena::~scena
		デストラクタ
	/*///===========================================================================
public:
	virtual ~scena() {}


	//-- Local Constant --------------- ローカル定数 ---------------------------
protected:
private:
	//-- Local Variable --------------- ローカル変数 ---------------------------
protected:
private:
	//-- Local Function --------------- ローカル関数 ---------------------------
protected:
private:
//------------------------------------------------------------------------------
}; //class scena
















} //namespace sebastiano



